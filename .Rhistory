polygon(c(dx$x[dx$x <= -value ], -value),
c(dx$y[dx$x <= -value ], 0),
col = "slateblue1",
border = 1)
abline(v = mean(x), col="black", lwd = 0.5)
text(mean(x), 0.1, "α=0.05",col = "black", pos = 3)
text(mean(x)+1.9, 0.1, "p-value (α) represents\nthe total area\nunder two tails",col = "black", pos = 3)
x = rnorm(10000, 0, 1)
dx <- density(x, bw = 1)
value = 2.83
# Plot the density without histogram
plot(dx, lwd = 2, col = "black",
main = "", xaxt ="n", xlab = "",  ylab = "",
xlim = c(-4,4 ), ylim = c(0, 0.3))
axis(1, at = value, labels =paste("z=",value, sep=""))
axis(1, at = -value, labels ="p-value = 0.0047")
polygon(c(dx$x[dx$x >= value ], value),
c(dx$y[dx$x >= value ], 0),
col = "slateblue1",
border = 1)
polygon(c(dx$x[dx$x <= -value ], -value),
c(dx$y[dx$x <= -value ], 0),
col = "slateblue1",
border = 1)
abline(v = mean(x), col="black", lwd = 0.5)
text(mean(x), 0.1, "α=0.05",col = "black", pos = 3)
text(mean(x)+1.9, 0.1, "p-value (α) represents\nthe total area\nunder two tails",col = "black", pos = 3)
x = rnorm(10000, 0, 1)
dx <- density(x, bw = 1)
value = 2.83
# Plot the density without histogram
plot(dx, lwd = 2, col = "black",
main = "", xaxt ="n", xlab = "",  ylab = "",
xlim = c(-4,4 ), ylim = c(0, 0.3))
axis(1, at = value, labels =paste("z=",value, sep=""))
axis(1, at = -value, labels ="p-value = 0.0047")
polygon(c(dx$x[dx$x >= value ], value),
c(dx$y[dx$x >= value ], 0),
col = "slateblue1",
border = 1)
polygon(c(dx$x[dx$x <= -value ], -value),
c(dx$y[dx$x <= -value ], 0),
col = "slateblue1",
border = 1)
abline(v = mean(x), col="black", lwd = 0.5)
text(mean(x), 0.1, "α=0.05",col = "black", pos = 3)
text(mean(x)+1.9, 0.1, "p-value represents\nthe total area\nunder two tails\np-value = 0.0047*2 = 0.0094",col = "black", pos = 3)
x = rnorm(10000, 0, 1)
dx <- density(x, bw = 1)
value = 2.83
# Plot the density without histogram
plot(dx, lwd = 2, col = "black",
main = "", xaxt ="n", xlab = "",  ylab = "",
xlim = c(-4,4 ), ylim = c(0, 0.3))
axis(1, at = value, labels =paste("z=",value, sep=""))
axis(1, at = -value, labels ="p-value = 0.0047")
polygon(c(dx$x[dx$x >= value ], value),
c(dx$y[dx$x >= value ], 0),
col = "slateblue1",
border = 1)
polygon(c(dx$x[dx$x <= -value ], -value),
c(dx$y[dx$x <= -value ], 0),
col = "slateblue1",
border = 1)
abline(v = mean(x), col="black", lwd = 0.5)
# text(mean(x), 0.1, "α=0.05",col = "black", pos = 3)
text(mean(x)+1.9, 0.1, "p-value represents\nthe total area\nunder two tails\np-value = 0.0047*2 = 0.0094",col = "black", pos = 3)
x = rnorm(10000, 0, 1)
dx <- density(x, bw = 1)
value = 2.83
# Plot the density without histogram
plot(dx, lwd = 2, col = "black",
main = "", xaxt ="n", xlab = "",  ylab = "",
xlim = c(-4,4 ), ylim = c(0, 0.3))
axis(1, at = value, labels =paste("z=",value, sep=""))
axis(1, at = -value, labels ="p-value = 0.0047")
polygon(c(dx$x[dx$x >= value ], value),
c(dx$y[dx$x >= value ], 0),
col = "slateblue1",
border = 1)
polygon(c(dx$x[dx$x <= -value ], -value),
c(dx$y[dx$x <= -value ], 0),
col = "slateblue1",
border = 1)
abline(v = mean(x), col="black", lwd = 0.5)
# text(mean(x), 0.1, "α=0.05",col = "black", pos = 3)
text(mean(x)+1.9, 0.1, "p-value represents\nthe total area\nunder two tails\np-value = 0.0047*2 = 0.00235",col = "black", pos = 3)
x = rnorm(10000, 0, 1)
dx <- density(x, bw = 1)
value = 2.83
# Plot the density without histogram
plot(dx, lwd = 2, col = "black",
main = "", xaxt ="n", xlab = "",  ylab = "",
xlim = c(-4,4 ), ylim = c(0, 0.3))
axis(1, at = value, labels =paste("z=",value, sep=""))
axis(1, at = -value, labels ="p-value = 0.00235")
polygon(c(dx$x[dx$x >= value ], value),
c(dx$y[dx$x >= value ], 0),
col = "slateblue1",
border = 1)
polygon(c(dx$x[dx$x <= -value ], -value),
c(dx$y[dx$x <= -value ], 0),
col = "slateblue1",
border = 1)
abline(v = mean(x), col="black", lwd = 0.5)
# text(mean(x), 0.1, "α=0.05",col = "black", pos = 3)
text(mean(x)+1.9, 0.1, "p-value represents\nthe total area\nunder two tails\np-value = 0.00235*2 = 0.0047",col = "black", pos = 3)
x = rnorm(10000, 0, 1)
dx <- density(x, bw = 1)
value = 2.83
# Plot the density without histogram
plot(dx, lwd = 2, col = "black",
main = "", xaxt ="n", xlab = "",  ylab = "",
xlim = c(-4,4 ), ylim = c(0, 0.3))
axis(1, at = value, labels =paste("z=",value,"\np-value = 0.00235", sep=""))
axis(1, at = -value, labels ="z=-2.83\np-value = 0.00235")
polygon(c(dx$x[dx$x >= value ], value),
c(dx$y[dx$x >= value ], 0),
col = "slateblue1",
border = 1)
polygon(c(dx$x[dx$x <= -value ], -value),
c(dx$y[dx$x <= -value ], 0),
col = "slateblue1",
border = 1)
abline(v = mean(x), col="black", lwd = 0.5)
# text(mean(x), 0.1, "α=0.05",col = "black", pos = 3)
text(mean(x)+1.9, 0.1, "p-value represents\nthe total area\nunder two tails\np-value = 0.00235*2 = 0.0047",col = "black", pos = 3)
x = rnorm(10000, 0, 1)
dx <- density(x, bw = 1)
value = 2.83
# Plot the density without histogram
plot(dx, lwd = 2, col = "black",
main = "", xaxt ="n", xlab = "",  ylab = "",
xlim = c(-4,4 ), ylim = c(0, 0.3))
axis(1, at = value, labels =paste("z=",value,"\np-value = 0.00235", sep=""))
axis(1, at = -value, labels ="z=-2.83\np-value = 0.00235")
axis(1, at = 0, labels ="H~0~: µ=0")
polygon(c(dx$x[dx$x >= value ], value),
c(dx$y[dx$x >= value ], 0),
col = "slateblue1",
border = 1)
polygon(c(dx$x[dx$x <= -value ], -value),
c(dx$y[dx$x <= -value ], 0),
col = "slateblue1",
border = 1)
abline(v = mean(x), col="darkblue", lwd = 0.5)
# text(mean(x), 0.1, "α=0.05",col = "black", pos = 3)
text(mean(x)+1.9, 0.1, "p-value represents\nthe total area\nunder two tails\np-value = 0.00235*2 = 0.0047",col = "black", pos = 3)
x = rnorm(10000, 0, 1)
dx <- density(x, bw = 1)
value = 2.83
# Plot the density without histogram
plot(dx, lwd = 2, col = "black",
main = "", xaxt ="n", xlab = "",  ylab = "",
xlim = c(-4,4 ), ylim = c(0, 0.3))
axis(1, at = value, labels =paste("z=",value,"\np-value = 0.00235", sep=""))
axis(1, at = -value, labels ="z=-2.83\np-value = 0.00235")
axis(1, at = 0, labels ="Null Hypothesis: µ=0")
polygon(c(dx$x[dx$x >= value ], value),
c(dx$y[dx$x >= value ], 0),
col = "slateblue1",
border = 1)
polygon(c(dx$x[dx$x <= -value ], -value),
c(dx$y[dx$x <= -value ], 0),
col = "slateblue1",
border = 1)
abline(v = mean(x), col="darkblue", lwd = 0.5)
# text(mean(x), 0.1, "α=0.05",col = "black", pos = 3)
text(mean(x)+1.9, 0.1, "p-value represents\nthe total area\nunder two tails\np-value = 0.00235*2 = 0.0047",col = "black", pos = 3)
x = rnorm(10000, 0, 1)
dx <- density(x, bw = 1)
value = 2.83
# Plot the density without histogram
plot(dx, lwd = 2, col = "black",
main = "", xaxt ="n", xlab = "",  ylab = "",
xlim = c(-4,4 ), ylim = c(0, 0.3))
axis(1, at = value, labels =paste("z=",value,"\np-value = 0.00235", sep=""))
axis(1, at = -value, labels ="z=-2.83\np-value = 0.00235")
axis(1, at = 0, labels ="H0: µ=0")
polygon(c(dx$x[dx$x >= value ], value),
c(dx$y[dx$x >= value ], 0),
col = "slateblue1",
border = 1)
polygon(c(dx$x[dx$x <= -value ], -value),
c(dx$y[dx$x <= -value ], 0),
col = "slateblue1",
border = 1)
abline(v = mean(x), col="darkblue", lwd = 0.5)
# text(mean(x), 0.1, "α=0.05",col = "black", pos = 3)
text(mean(x)+1.9, 0.1, "p-value represents\nthe total area\nunder two tails\np-value = 0.00235*2 = 0.0047",col = "black", pos = 3)
x = rnorm(10000, 0, 1)
dx <- density(x, bw = 1)
value = 2.83
# Plot the density without histogram
plot(dx, lwd = 2, col = "black",
main = "", xaxt ="n", xlab = "",  ylab = "",
xlim = c(-4,4 ), ylim = c(0, 0.3))
axis(1, at = value, labels =paste("z=",value,"\np-value = 0.00235", sep=""))
axis(1, at = -value, labels ="p-value = 0.00235")
axis(1, at = 0, labels ="H0: µ=0")
polygon(c(dx$x[dx$x >= value ], value),
c(dx$y[dx$x >= value ], 0),
col = "slateblue1",
border = 1)
polygon(c(dx$x[dx$x <= -value ], -value),
c(dx$y[dx$x <= -value ], 0),
col = "slateblue1",
border = 1)
abline(v = mean(x), col="darkblue", lwd = 0.5)
# text(mean(x), 0.1, "α=0.05",col = "black", pos = 3)
text(mean(x)+1.9, 0.1, "p-value represents\nthe total area\nunder two tails\np-value = 0.00235*2 = 0.0047",col = "black", pos = 3)
?pnorm
dnorm(2.83)
pnorm(2.83)
1-pnorm(2.83)
1-pnorm(1.35)
2*pnorm(1.35)
2*(1-pnorm(1.35))
# treatments = number of application ;
# replicates = how many reviews per person ;
# blocks = number of reviewers
assignments<-as.data.frame(blocks(treatments=40),
replicates=2,
blocks=14)$Plan)
assignments<-as.data.frame(blocks(treatments=length(row_number(award_f)),
replicates=3,
blocks=length(row_number(comm_r)))$Plan)
# treatments = number of application ;
# replicates = how many reviews per person ;
# blocks = number of reviewers
assignments<-as.data.frame(blocks(treatments=40),
replicates=2,
blocks=14)$Plan
# install.packages("blocksdesign")
library(blocksdesign)
# treatments = number of application ;
# replicates = how many reviews per person ;
# blocks = number of reviewers
assignments<-as.data.frame(blocks(treatments=40),
replicates=2,
blocks=14)$Plan
# treatments = number of application ;
# replicates = how many reviews per person ;
# blocks = number of reviewers
assignments<-as.data.frame(blocks(treatments=40,
)
# treatments = number of application ;
# replicates = how many reviews per person ;
# blocks = number of reviewers
assignments<-as.data.frame(blocks(treatments=40,
replicates=2,
blocks=14)$Plan)
View(assignments)
data_dir <- "~/GitHub/stat-comp-fall-22/lectures/lecture07/bglobin_annotations"
file_names <- list.files(data_dir, full.names = TRUE)
annotations <- lapply(file_names, read.csv)
annotations <- lapply(file_names, read.csv, stringsAsFactors = FALSE)
lapply(annotations[1:3], summary)
data_dir <- "/Users/KATE1/Library/CloudStorage/OneDrive-IndianaUniversity/Active/Fall 2023/S610/bglobin_annotations"
file_names <- list.files(data_dir, full.names = TRUE)
annotations <- lapply(file_names, read.csv)
annotations <- lapply(file_names, read.csv, stringsAsFactors = FALSE)
lapply(annotations[1:3], summary)
sapply(annotations[1:3], summary)
x = lapply(annotations[1:3], summary) //
x = lapply(annotations[1:3], summary)
xs = sapply(annotations[1:3], summary)
View(xs)
typeof(xs)
typeof(x)
sapply(annotations, nrow)
X <- matrix(sample(-5:5, size = 20, replace = TRUE), nrow = 4, ncol = 5)
X
xa <- apply(X, 2, min)
xa
typeof(xa)
steak_combinations <- data.frame(
temp = c(117, 120, 135, 105),
type = c("rare", "med_rare", "med_rare", "rare"))
steak_directions_for_apply <- function(temp_and_type) {
temp <- temp_and_type[1]
steak_type <- temp_and_type[2]
if(steak_type == "rare" & temp > 115) {
return("take your steak off!")
} else if(steak_type == "med_rare" & temp > 125) {
return("take your steak off!")
}
"you can keep cooking"
}
## this works, but it really shouldn't
apply(steak_combinations, 1, steak_directions_for_apply)
## this works, but it really shouldn't
xa = apply(steak_combinations, 1, steak_directions_for_apply)
typeof(xa)
steak_directions_for_apply <- function(temp_and_type) {
temp <- temp_and_type[1]
steak_type <- temp_and_type[2]
if(steak_type == "rare" & temp > 115) {
return(2)
} else if(steak_type == "med_rare" & temp > 125) {
return(3)
}
4
}
## this works, but it really shouldn't
xa = apply(steak_combinations, 1, steak_directions_for_apply)
typeof(xa)
steak_directions_for_apply <- function(temp_and_type) {
temp <- temp_and_type[1]
steak_type <- temp_and_type[2]
if(steak_type == "rare" & temp > 115) {
return(list("take your steak off!"))
} else if(steak_type == "med_rare" & temp > 125) {
return(list("take your steak off!"))
}
list("you can keep cooking")
}
## this works, but it really shouldn't
xa = apply(steak_combinations, 1, steak_directions_for_apply)
typeof(xa)
steak_admonishments_for_apply <- function(temp_and_type) {
temp <- temp_and_type[1]
steak_type <- temp_and_type[2]
if(steak_type == "rare" & temp > 115) {
admonishment <- sprintf("Your steak is overcooked by %f degrees!", temp - 115)
return(admonishment)
} else if(steak_type == "med_rare" & temp > 125) {
admonishment <- sprintf("Your steak is overcooked by %f degrees!", temp - 125)
return(admonishment)
}
"Your steak is not overcooked yet"
}
apply(steak_combinations, 1, steak_admonishments_for_apply)
return(admonhishment)
if(steak_type == "rare" & temp > 115) {
admonishment <- sprintf("Your steak is overcooked by %f degrees!", temp - 115)
return(admonhishment)
} else if(steak_type == "med_rare" & temp > 125) {
admonishment <- sprintf("Your steak is overcooked by %f degrees!", temp - 125)
return(admonishment)
}
steak_admonishments_for_apply <- function(temp_and_type) {
temp <- temp_and_type[1]
steak_type <- temp_and_type[2]
if(steak_type == "rare" & temp > 115) {
admonishment <- sprintf("Your steak is overcooked by %f degrees!", temp - 115)
return(admonhishment)
} else if(steak_type == "med_rare" & temp > 125) {
admonishment <- sprintf("Your steak is overcooked by %f degrees!", temp - 125)
return(admonishment)
}
"Your steak is not overcooked yet"
}
apply(steak_combinations, 1, steak_admonishments_for_apply)
steak_admonishments_for_apply <- function(temp_and_type) {
temp <- temp_and_type[1]
steak_type <- temp_and_type[2]
if(steak_type == "rare" & temp > 115) {
admonishment <- sprintf("Your steak is overcooked by %f degrees!", temp - 115)
return(admonishment)
} else if(steak_type == "med_rare" & temp > 125) {
admonishment <- sprintf("Your steak is overcooked by %f degrees!", temp - 125)
return(admonishment)
}
"Your steak is not overcooked yet"
}
apply(steak_combinations, 1, steak_admonishments_for_apply)
frisk <- read.table("http://www.stat.columbia.edu/~gelman/arm/examples/police/frisk_with_noise.dat", skip = 6, header = TRUE)
head(frisk)
tapply(X = frisk$stops, INDEX = frisk$precinct, FUN = sum)
tapply(X = frisk$stops, INDEX = frisk$eth, FUN = sum)
stops_and_past_arrests_correlation <- function(frisk_subset) {
cor(frisk_subset$stops, frisk_subset$past.arrests)
}
within_precinct_cors <- by(data = frisk,
INDICES = frisk$precinct,
FUN = stops_and_past_arrests_correlation)
head(within_precinct_cors)
data(diamonds)
get_diamond_coefficients <- function(data_subset) {
diamond_lm <- lm(log(price) ~ carat, data = data_subset)
diamond_coefficients <- coef(diamond_lm)
return(diamond_coefficients)
}
library(ggplot2)
data(diamonds)
get_diamond_coefficients <- function(data_subset) {
diamond_lm <- lm(log(price) ~ carat, data = data_subset)
diamond_coefficients <- coef(diamond_lm)
return(diamond_coefficients)
}
## by does the split and apply steps, and an ugly version of a combine step
out <- by(data = diamonds, INDICES = diamonds$color, FUN = get_diamond_coefficients)
simplify2array(out)
do.call(rbind, out)
library(plyr)
a_list <- list(a = 1, b = "state", c = TRUE)
a_list
laply(a_list, typeof)
ldply(a_list, typeof)
typeof(ldply(a_list, typeof))
d = ldply(a_list, typeof)
a = laply(a_list, typeof)
l = llply(a_list, typeof)
typeof(d)
typeof(a)
typeof(l)
class(d)
class(a)
class(l)
?ddply
?ldply
# The function 'plot.std.normal' draws a standard normal distribution.
plot.std.normal <- function(){
plot(c(-4,4),c(0,0.4),bty='l',xlab='z',ylab='Density',yaxs='i',xaxs='i')
x <- seq(-4,4,length.out=500)
polygon(c(x[1],x,x[length(x)]),c(0,dnorm(x),0),col='lightblue',border='black')
}
# The function 'sade.std.normal' shades in the area between an upper bound 'ub'
# and a lower bound 'lb'.
# To shade all the way in either direction, just omit the upper bound or lower bound
# You can also supply a color for the shading
shade.std.normal <- function(lb=NA,ub=NA,col='blue', ...){
x <- seq(max(par('usr')[1],lb,na.rm=TRUE),
min(par('usr')[2],ub,na.rm=TRUE),length.out=500)
polygon(c(x[1],x,x[length(x)]),c(0,dnorm(x),0),col=col,border='black')
}
# The function 'mark.z.value' adds a vertical line to mark a z value.
mark.z.value <- function(z){
abline(v=z,lwd=2)
text(z,.4,paste0('z = ',round(z,2)),adj=c(-.25,1))
}
# Examples
plot.std.normal()
shade.std.normal(ub=1)
mark.z.value(z=1)
z <- matrix(sample(1:12), nrow = 4)
View(z)
z[2:3, 2] ## extract the 2nd and 3rd rows of the 2nd column
View(z)
z[,2:3] ## extract the 2nd and 3rd columns
c = list(1, 2, 3, 4)
c[1]
c[[1]]
typeof(z)
class(z)
pnorm(2.29)
1-pnorm(2.29)
Wz = diag(make_weight_matrix(z, x, omega))
llr = function(x, y, z, omega) {
fits = sapply(z, compute_f_hat, x, y, omega)
return(fits)
}
llr = function(x, y, z, omega) {
fits = sapply(z, compute_f_hat, x, y, omega)
return(fits)
}
llr = function(x, y, z, omega) {
fits = sapply(z, compute_f_hat, x, y, omega)
return(fits)
}
llr = function(x, y, z, omega) {
fits = sapply(z, compute_f_hat, x, y, omega)
return(fits)
}
# Create a function to perform element-wise matrix multiplication
elementwise_matrix_mult <- function(A, B) {
return(sapply(seq_len(ncol(A)), function(i) A[, i] %*% B[i, , drop = FALSE]))
}
compute_f_hat = function(z, x, y, omega) {
Wz = diag(make_weight_matrix(z, x, omega))
# Wz1 = make_weight_matrix(z, x, omega)
X = make_predictor_matrix(x)
# f_hat = c(1, z) %*% solve(t(X) %*% Wz %*% X ) %*% t(X) %*% Wz %*% y
f_hat = c(1, z) %*% solve(t(X) %*% t(apply(Wz, 1, "*", X))) %*% t(X) %*% t(apply(Wz, 1, "*", y))
return(f_hat)
}
make_weight_matrix <- function(z, x, omega) {
r <- abs(x - z)/omega
w <- ifelse(abs(r) < 1, (1 - abs(r)^3)^3, 0)
return(diag(w))
}
make_predictor_matrix <- function(x) {
X <- cbind(1,x)
return(X)
}
make_predictor_matrix(1:4)
setwd("~/Documents/GitHub/s610_lab3")
source("llr_functions.R")
source("test_llr.R")
# install.packages("bench")
library(bench)
microbenchmark::microbenchmark(
llr(x, y, z, omega = 1),
make_weight_matrix(0.2,x,omega = 2),
make_predictor_matrix(rnorm(5)))
compute_f_hat = function(z, x, y, omega) {
Wz = make_weight_matrix(z, x, omega)
X = make_predictor_matrix(x)
f_hat = c(1, z) %*% solve(t(X) %*% Wz %*% X) %*% t(X) %*% Wz %*% y
return(f_hat)
}
make_weight_matrix <- function(z, x, omega) {
r <- abs(x - z)/omega
w <- ifelse(abs(r) < 1, (1 - abs(r)^3)^3, 0)
return(diag(w))
}
make_predictor_matrix <- function(x) {
X <- cbind(1,x)
return(X)
}
make_predictor_matrix(1:4)
